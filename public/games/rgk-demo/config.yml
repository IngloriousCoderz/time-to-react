---
debug:
  fps:
    show: true
    frequency: 60
  keys:
    show: true

stage:
  width: 800
  height: 450
  background: rgb(58, 155, 220)

physics:
  type: matter-js
  world:
    gravity:
      x: 0
      y: 1
      scale: 0.1

input:
  allowedKeys:
    - ArrowLeft
    - ArrowRight
    - ArrowUp
    - ' '
    - a
  keys: {}

scene:
  id: scene
  type: Node
  children:
    - id: level
      type: Tilemap
    - id: character
      type: Area2D
      children:
        - id: body
          type: Body
          children:
            - id: sprite
              type: AnimatedSprite

nodes:
  - id: level
    status:
      position:
        x: 0
        y: 0

      reducers: >
        {
          'nodes/update': (state, action) => {
            state.position = action.payload.position
          }
        }
    layers:
      - id: buildings
        position:
          x: 0
          y: -50
        src: games/rgk-demo/level/buildings.png
        width: 3072
        height: 512
        rows: 1
        cols: 6
        scale: 0.78125
        map:
          - - 0
            - 1
            - 2
            - 3
            - 4
            - 5
      - id: boardwalk
        position:
          x: 0
          y: 350
        src: games/rgk-demo/level/boardwalktile.png
        width: 128
        height: 128
        rows: 1
        cols: 1
        scale: 0.78125
        map:
          - - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
            - 0
  - id: character
    status:
      id: idle
      speed: 400
      position:
        x: 0
        y: 300
      velocity:
        x: 0
        y: 0
      force:
        x: 0
        y: 0
      reducers: >
        {
          'input/keyPressed': (state, action) => {
            const { keys, delta } = action.payload

            state.force = updateForce(keys, state, delta)
            state.velocity = updateVelocity(keys, state, delta)
            state.direction = updateDirection(keys, state)

            const id = updateStatus(keys, state)
            if (id !== state.id && id === 'punching') {
              state.punching = true
            }
            state.id = id
          },

          'nodes/physicsUpdate': (state, action) => {
            state.position = updatePosition(action.payload)
            state.flip = updateFlip(state)
          },

          'node/animationEnd': (state, action) => {
            if (state.id === 'punching') {
              state.punching = false
              state.id = updateStatus({}, state)
            }
          }
        }

        function updateForce(keys, { speed }, delta) {
          if (keys[' ']) {
            return { x: 0, y: -0.15 }
          }

          return { x: 0, y: 0 }
        }

        function updateVelocity(keys, { speed }, delta) {
          let velocity = { x: 0, y: 0 }

          if (keys.ArrowRight) {
            velocity.x += 1
          }
          
          if (keys.ArrowLeft) {
            velocity.x -= 1
          }

          velocity = Vector.normalize(velocity)
          velocity = Vector.mult(velocity, speed)
          velocity = Vector.mult(velocity, delta)

          return velocity
        }

        function updateDirection(keys, { direction }) {
          if (keys.ArrowRight) {
            return 'right'
          }

          if (keys.ArrowLeft) {
            return 'left'
          }
          
          return direction
        }

        function updateStatus(keys, { id, velocity, punching }) {
          if (keys.a || punching) {
            return 'punching'
          }

          if (velocity.y) {
            return 'jumping'
          }

          if (velocity.x) {
            return 'right'
          }

          return 'idle'
        }

        function updateFlip({ direction }) {
          return direction === 'left' ? 'h' : ''
        }

        function updatePosition({ body }) {
          return { ...body.position }
        }
    physics:
      shape: rectangle
      args:
        - 0
        - 0
        - 64
        - 64
      inertia: Infinity
    sprite:
      src: games/rgk-demo/character/sprite.png
      width: 640
      height: 320
      rows: 5
      cols: 10
      scale: 2
      speed: 20
      states:
        idle:
          - - 0
            - 2
        right:
          - - 0
            - 0
          - - 1
            - 0
          - - 2
            - 0
          - - 3
            - 0
          - - 4
            - 0
          - - 5
            - 0
          - - 6
            - 0
          - - 7
            - 0
          - - 8
            - 0
          - - 9
            - 0
        jumping:
          - - 0
            - 0
        punching:
          - - 0
            - 4
          - - 1
            - 4
          - - 2
            - 4
          - - 3
            - 4
          - - 4
            - 4
          - - 5
            - 4
        leaving:
          - - 0
            - 3
          - - 1
            - 3
          - - 2
            - 3
          - - 3
            - 3
          - - 4
            - 3
